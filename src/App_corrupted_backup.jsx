import React, { useState, useEffect, useCallback, useMemo } from 'react';
  import { initializeApp } from 'firebase/app';
  import {   getAuth,   signInAnonymously,   signInWithCustomToken,   onAuthStateChanged } from 'firebase/auth';
  import { getFirestore, collection, onSnapshot, addDoc, query, serverTimestamp, doc, updateDoc, orderBy, limit, where, setLogLevel } from 'firebase/firestore';
  import { Plus, CheckCircle, List, BarChart2, Loader, AlertTriangle, Sparkles, ArrowLeft, Clock, Target, BarChart, Calendar, FileText, Search } from 'lucide-react';
  // LibrerÃ­as usando SVG bÃ¡sico)
  // --- FIREBASE SETUP (ConfiguraciÃ³n de Firebase) ---
  // Para el desarrollo local, crea un archivo .env.local en la raÃ­z de tu proyecto
  // y aÃ±ade tu configuraciÃ³n de Firebase allÃ­.const firebaseConfig = {  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,  appId: import.meta.env.VITE_FIREBASE_APP_ID,};
  const initialAuthToken = import.meta.env.VITE_INITIAL_AUTH_TOKEN || null;const appId = import.meta.env.VITE_APP_ID || 'default-app-id';
  // Gemini API Configuration
  // Para el desarrollo local, aÃ±ade tu clave de API de Gemini en el archivo .env.local.const API_KEY = import.meta.env.VITE_GEMINI_API_KEY;const GEMINI_MODEL = import.meta.env.VITE_GEMINI_MODEL || 'gemini-pro';const GEMINI_API_VERSION = import.meta.env.VITE_GEMINI_API_VERSION || 'v1';const GEMINI_API_URL = `https://generativelanguage.googleapis.com/${GEMINI_API_VERSION}/models/${GEMINI_MODEL}:generateContent?key=`;
  // Define una plantilla de checklist de ejemplo que se guardarÃ¡ junto con el activoconst defaultChecklist = [    { text: "Verificar nivel de aceite (visual)", type: "boolean" },    { text: "Detectar vibraciÃ³n anormal (tacto/oÃ­do)", type: "boolean" },    { text: "Temperatura superficial (tacto/termÃ³metro)", type: "text" },    { text: "Presencia de fugas o derrames", type: "boolean" },];
  // DEMO MODE: permite ver la interfaz sin Firebase ni Geminiconst DEMO_MODE = (import.meta.env.VITE_DEMO_MODE === 'true');
const DemoApp = () => {
  const [searchTerm, setSearchTerm] = useState('');
const [activeView, setActiveView] = useState('list');
const [selectedAsset, setSelectedAsset] = useState(null);
const sampleAssets = [    { id: 'A-100', name: 'Bomba CentrÃ­fuga #1', location: 'Sala 2', description: 'Bomba de proceso', criticality: 'B', createdAt: new Date() },    { id: 'A-200', name: 'Motor ElÃ©ctrico 15kW', location: 'LÃ­nea A', description: 'Accionamiento principal', criticality: 'C', createdAt: new Date() },    { id: 'A-300', name: 'Compresor', location: 'Sala Compresores', description: 'Aire comprimido', criticality: 'A', createdAt: new Date() },  ];
  const sampleInspections = [    { id: 'I-1', assetId: 'A-100', date: new Date(), overallStatus: 'OK', notes: 'Sin novedades', results: [      { text: 'Nivel de aceite', answer: 'OK', status: 'OK' },      { text: 'VibraciÃ³n', answer: 'Normal', status: 'OK' },    ]},    { id: 'I-2', assetId: 'A-100', date: new Date(Date.now()-86400000), overallStatus: 'ALERT', notes: 'Rastro de fuga', results: [      { text: 'Fugas', answer: 'SÃ­', status: 'ALERT', notes: 'Goteo leve' },    ]},  ];
  const getCriticalityColor = (crit) => {
    switch (crit) {      case 'A': return 'bg-red-500 text-white';      case 'B': return 'bg-orange-500 text-white';      case 'C': return 'bg-yellow-500 text-gray-800';      case 'D': return 'bg-green-500 text-white';      default: return 'bg-gray-400 text-white';    }  };
  const filteredAssets = useMemo(() => {
    if (!searchTerm) return sampleAssets;    const term = searchTerm.toLowerCase();    return sampleAssets.filter(a => a.name.toLowerCase().includes(term) || (a.location||'').toLowerCase().includes(term));  }, [searchTerm]);  return (    <div className="min-h-screen bg-gray-900 text-gray-100 p-6">      <div className="max-w-6xl mx-auto">        <div className="mb-6 p-4 rounded-lg bg-blue-900/40 border border-blue-700">          <p className="text-sm text-blue-200">            Demo Mode activo: no se requiere configuraciÃ³n. Para conectar Firebase/Gemini, crea `.env.local`.          </p>        </div>        <div className="flex items-center justify-between mb-6">          <h1 className="text-2xl font-bold">Activos</h1>          <div className="relative w-72">            <input              value={searchTerm}              onChange={(e)=>setSearchTerm(e.target.value)}              placeholder="Buscar por nombre o ubicaciÃ³n"              className="w-full rounded-md bg-gray-800 border border-gray-700 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"            />            <Search className="w-4 h-4 text-gray-400 absolute right-3 top-2.5" />          </div>        </div>        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">          {filteredAssets.map(a => (            <div key={a.id} className="p-4 bg-gray-800 rounded-lg border border-gray-700 hover:border-gray-600 transition">              <div className="flex items-start justify-between">                <p className="text-lg font-semibold text-white">{a.name}</p>                <span className={`text-xs px-2 py-0.5 rounded ${getCriticalityColor(a.criticality)}`}>{a.criticality}</span>              </div>              <p className="text-sm text-gray-400">{a.location}</p>              <p className="text-xs text-gray-500 mt-1">{a.description}</p>              <div className="mt-3 flex gap-2">                <button className="text-xs bg-blue-600 hover:bg-blue-500 px-3 py-1 rounded" onClick={() => {
setSelectedAsset(a); setActiveView('assetHistory')}}>                  Ver historial                </button>                <button className="text-xs bg-emerald-600 hover:bg-emerald-500 px-3 py-1 rounded" onClick={()=>alert('Demo: Nueva inspecciÃ³n')}>                  Nueva inspecciÃ³n                </button>              </div>            </div>          ))}        </div>        {activeView === 'assetHistory' && selectedAsset && (          <div className="mt-8 bg-gray-800 rounded-lg p-4 border border-gray-700">            <div className="flex items-center justify-between mb-4">              <div className="flex items-center gap-2">                <ArrowLeft className="w-5 h-5 cursor-pointer" onClick={()=>setActiveView('list')} />                <h2 className="text-xl font-semibold">Historial - {selectedAsset.name}</h2>              </div>              <span className={`text-xs px-2 py-0.5 rounded ${getCriticalityColor(selectedAsset.criticality)}`}>Crit. {selectedAsset.criticality}</span>            </div>            <div className="grid lg:grid-cols-3 gap-4">              <div className="lg:col-span-1 bg-gray-900 rounded p-3 border border-gray-700">                <p className="text-blue-300 text-sm font-semibold mb-2">Registros ({sampleInspections.filter(i=>i.assetId===selectedAsset.id).length})</p>                <div className="space-y-2">                  {sampleInspections.filter(i=>i.assetId===selectedAsset.id).map(i => (                    <div key={i.id} className={`p-2 rounded border-l-4 ${i.overallStatus==='ALERT'?'bg-red-900/30 border-red-500':'bg-gray-700 border-green-500'}`}>                      <div className="flex items-center justify-between text-sm">                        <div className="flex items-center"><Calendar className="w-4 h-4 mr-2 text-gray-400" />{i.date.toLocaleDateString()}</div>                        <span className={`text-xs px-2 py-0.5 rounded ${i.overallStatus==='ALERT'?'bg-red-600':'bg-green-600'} text-white`}>{i.overallStatus}</span>                      </div>                    </div>                  ))}                </div>              </div>              <div className="lg:col-span-2 bg-gray-900 rounded p-4 border border-gray-700">                <p className="text-sm text-gray-400">Selecciona un registro (demo muestra lista simple)</p>              </div>            </div>          </div>        )}      </div>    </div>  );};
  // Componente para manejar la lÃ³gica de Retry y Llamada a Geminiconst fetchGemini = async (payload) => {
    if (!API_KEY) {        throw new Error('ConfiguraciÃ³n faltante: define VITE_GEMINI_API_KEY para habilitar las funciones de IA.');    }        let lastError = null;    for (let i = 0; i < 3; i++) { 
  // Retry up to 3 times        const delay = Math.pow(2, i) * 1000; 
  // Exponential backoff (1s, 2s, 4s)        if (i > 0) await new Promise(resolve => setTimeout(resolve, delay));        try {            console.debug('[Gemini] Intento', i + 1, 'Modelo:', GEMINI_MODEL);
const response = await fetch(GEMINI_API_URL + API_KEY, {                method: 'POST',                headers: { 'Content-Type': 'application/json' },                body: JSON.stringify(payload)            });            if (!response.ok) {                let detail = '';                try { detail = await response.text(); } catch {}                lastError = `HTTP ${response.status} ${response.statusText} (${GEMINI_MODEL})${detail ? ` - ${detail.slice(0,300)}`: ''}`;                continue;            }                        const result = await response.json();
const text = result?.candidates?.[0]?.content?.parts?.[0]?.text;            if (text) {                return text.trim();            } else {                lastError = "Respuesta de Gemini vacÃ­a o inesperada.";            }        } catch (e) {            lastError = e.message;        }    }    throw new Error(`Fallo la llamada a Gemini despuÃ©s de 3 intentos. Ãšltimo error: ${lastError}`);};
  // --- START: ASSET HISTORY COMPONENT ---const AssetHistory = ({ db, userId, appId, asset, onBack }) => {
    const [historyInspections, setHistoryInspections] = useState([]);
const [selectedInspection, setSelectedInspection] = useState(null);
const [loadingHistory, setLoadingHistory] = useState(true);    
  // 1. Carga del Historial de Inspecciones para el activo seleccionado    useEffect(() => {
        if (!db || !userId || !asset?.id) return;                setLoadingHistory(true);
const inspectionCollectionPath = `/artifacts/${appId}/users/${userId}/inspections`;        const inspectionsColRef = collection(db, inspectionCollectionPath);                
  // Query: Trae todas las inspecciones para ESTE activo, ordenadas por fecha        const q = query(            inspectionsColRef,             where('assetId', '==', asset.id),            orderBy('date', 'desc')        );
const unsubscribe = onSnapshot(q, (snapshot) => {
            const data = snapshot.docs.map(doc => ({                id: doc.id,                ...doc.data(),                date: doc.data().date?.toDate ? doc.data().date.toDate() : new Date(),            }));            setHistoryInspections(data);            setLoadingHistory(false);            
  // Si hay un historial, seleccionamos la Ãºltima inspecciÃ³n por defecto            if (data.length > 0 && !selectedInspection) {                setSelectedInspection(data[0]);            }        }, (e) => {
            console.error("Error fetching asset history:", e);            setLoadingHistory(false);        });        return () => unsubscribe();    }, [db, userId, appId, asset]);
const getCriticalityColor = (crit) => {
        switch (crit) {          case 'A': return 'bg-red-500 text-white';          case 'B': return 'bg-orange-500 text-white';          case 'C': return 'bg-yellow-500 text-gray-800';          case 'D': return 'bg-green-500 text-white';          default: return 'bg-gray-400 text-white';        }    };    return (        <div className="space-y-6">            <div className="flex justify-between items-center bg-gray-800 p-6 rounded-xl shadow-2xl border-b border-gray-700">                <h2 className="text-3xl font-bold text-teal-400">                    Historial de {asset.name}                 </h2>                <button                     onClick={() => {
setSelectedInspection(null); onBack();}}                    className="px-4 py-2 bg-gray-600 hover:bg-gray-500 rounded-lg text-white transition duration-150 flex items-center"                >                    <ArrowLeft className="w-4 h-4 mr-2" /> Volver a Dashboard                </button>            </div>            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">                {/* Columna Izquierda: Lista de Inspecciones */}                <div className="lg:col-span-1 bg-gray-800 p-4 rounded-xl shadow-lg h-96 overflow-y-auto">                    <p className="text-xl font-semibold text-blue-300 mb-4 border-b border-gray-700 pb-2">                        Registros ({historyInspections.length})                    </p>                    {loadingHistory ? (                        <div className="flex justify-center items-center h-full"><Loader className="w-6 h-6 animate-spin text-blue-400" /></div>                    ) : historyInspections.length === 0 ? (                        <p className="text-gray-400 italic">No hay inspecciones registradas para este activo.</p>                    ) : (                        <div className="space-y-3">                            {historyInspections.map((insp) => (                                <div                                     key={insp.id}                                    onClick={() => setSelectedInspection(insp)}                                    className={`p-3 rounded-lg cursor-pointer transition duration-150 border-l-4 ${                                        selectedInspection?.id === insp.id                                             ? 'bg-blue-900 border-blue-400 shadow-xl'                                             : 'bg-gray-700 hover:bg-gray-700/80 border-gray-600'                                    }`}                                >                                    <div className="flex justify-between items-center">                                        <div className="flex items-center text-sm font-medium">                                            <Calendar className="w-4 h-4 mr-2 text-gray-400" />                                            {insp.date.toLocaleDateString()}                                        </div>                                        <span className={`px-2 py-0.5 text-xs font-semibold rounded-full ${insp.overallStatus === 'ALERT' ? 'bg-red-600' : 'bg-green-600'} text-white`}>                                            {insp.overallStatus}                                        </span>                                    </div>                                </div>                            ))}                        </div>                    )}                </div>                {/* Columna Derecha: Detalle de la InspecciÃ³n Seleccionada */}                <div className="lg:col-span-2 bg-gray-800 p-6 rounded-xl shadow-lg">                    {selectedInspection ? (                        <>                            <div className="mb-6 pb-4 border-b border-gray-700">                                <div className="flex justify-between items-center">                                    <h3 className="text-2xl font-bold text-white">                                        Registro del {selectedInspection.date.toLocaleDateString()}                                    </h3>                                    <span className={`font-bold p-2 rounded ${getCriticalityColor(asset.criticality)}`}>                                        Crit.: {asset.criticality}                                    </span>                                </div>                                <p className="text-sm text-gray-400 mt-1">                                    Notas Generales: <span className="text-gray-200 italic">{selectedInspection.notes || 'N/A'}</span>                                </p>                            </div>                                                        {/* Resultados del Checklist */}                            <div className="space-y-3 h-80 overflow-y-auto pr-2">                                {selectedInspection.results.map((result, index) => (                                    <div                                         key={index}                                         className={`p-3 rounded-lg shadow-md ${result.status === 'ALERT' ? 'bg-red-900/50 border-l-4 border-red-500' : 'bg-gray-700 border-l-4 border-green-500'}`}                                    >                                        <p className="text-base font-medium text-gray-50">                                            {index + 1}. {result.text}                                        </p>                                        <div className="flex justify-between items-start mt-1 text-sm">                                            <span className="text-gray-300">Respuesta: <strong className="text-white">{result.answer}</strong></span>                                            <span className={`text-xs font-semibold ${result.status === 'ALERT' ? 'text-red-300' : 'text-green-300'}`}>{result.status}</span>                                        </div>                                        {result.notes && (                                            <p className="text-xs text-gray-400 mt-1 italic">Notas: {result.notes}</p>                                        )}                                    </div>                                ))}                            </div>                        </>                    ) : (                        <div className="flex justify-center items-center h-full text-gray-500">                            <FileText className="w-10 h-10 mr-3" />                            Selecciona un registro de inspecciÃ³n para ver los detalles del checklist.                        </div>                    )}                </div>            </div>        </div>    );};
  // --- END: ASSET HISTORY COMPONENT ---
  // --- START: DASHBOARD UTILITIES AND COMPONENTS ---
  // Componente simple para el grÃ¡fico de pastel (usando SVG bÃ¡sico)const PieChart = ({ data }) => {
    const total = data.reduce((sum, item) => sum + item.value, 0);    if (total === 0) return <p className="text-gray-400 italic">No hay datos para mostrar.</p>;    let startAngle = 0;        return (        <svg viewBox="0 0 100 100" className="w-full max-w-xs mx-auto">            {data.map((item, index) => {
                const angle = (item.value / total) * 360;                const largeArcFlag = angle > 180 ? 1 : 0;                                const x1 = 50 + 50 * Math.sin(startAngle * Math.PI / 180);
const y1 = 50 - 50 * Math.cos(startAngle * Math.PI / 180);                                startAngle += angle;                                const x2 = 50 + 50 * Math.sin(startAngle * Math.PI / 180);
const y2 = 50 - 50 * Math.cos(startAngle * Math.PI / 180);
const pathData = angle === 360                     ? `M 50 50 L 50 0 A 50 50 0 1 1 49.9 0 Z`                     : `M 50 50 L ${x1} ${y1} A 50 50 0 ${largeArcFlag} 1 ${x2} ${y2} Z`;                return <path key={index} d={pathData} fill={item.color} />;            })}        </svg>    );};
  // Componente simple para el grÃ¡fico de barras (simulaciÃ³n de evoluciÃ³n)const AssetEvolutionChart = ({ data }) => {
    const maxVal = Math.max(...data.map(d => d.valueOK + d.valueALERT)) || 1;    const months = ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"];        
  // Solo mostramos los Ãºltimos 12 meses, simulados aquÃ­ para mantener el ejemplo    const displayData = data.slice(-12);    return (        <svg viewBox="0 0 400 200" className="w-full h-auto">            <line x1="20" y1="180" x2="380" y2="180" stroke="#4B5563" /> {/* Eje X */}            <line x1="20" y1="20" x2="20" y2="180" stroke="#4B5563" /> {/* Eje Y */}                        {displayData.map((d, index) => {
                const xBase = 30 + index * 30;                const heightOK = (d.valueOK / maxVal) * 160;                const heightALERT = (d.valueALERT / maxVal) * 160;                                return (                    <g key={index}>                        {/* Barra OK (verde) */}                        <rect                             x={xBase}                             y={180 - heightOK}                             width="20"                             height={heightOK}                             fill="#10B981"                             rx="2"                         />                        {/* Barra ALERT (rojo) */}                        <rect                             x={xBase}                             y={180 - heightOK - heightALERT}                             width="20"                             height={heightALERT}                             fill="#EF4444"                             rx="2"                         />                        {/* Etiqueta del Mes */}                        <text x={xBase + 10} y="195" textAnchor="middle" fontSize="10" fill="#9CA3AF">                            {months[index % 12]}                        </text>                    </g>                );            })}            {/* Etiquetas del Eje Y (SimulaciÃ³n) */}            {[0, 25, 50, 75, 100].map((val, i) => (                <text key={i} x="15" y={180 - (val / 100) * 160} textAnchor="end" fontSize="10" fill="#9CA3AF">                    {(val / 100 * maxVal).toFixed(0)}                </text>            ))}        </svg>    );};
  const Dashboard = ({ assets, latestInspections, onInspectAssetHistory }) => {
        
  // MÃ©trica 1: Resumen de Estado de Activos (OK/ALERT/Uninspected)    const assetStatusSummary = useMemo(() => {
        const summary = { 'OK': 0, 'ALERT': 0, 'Uninspected': 0 };        assets.forEach(asset => {            summary[asset.status] = (summary[asset.status] || 0) + 1;        });
const total = assets.length;        const data = [            { name: 'OK', value: summary['OK'], color: '#10B981' }, 
  // Green            { name: 'ALERTA', value: summary['ALERT'], color: '#EF4444' }, 
  // Red            { name: 'No Insp.', value: summary['Uninspected'], color: '#F59E0B' }, 
  // Amber        ].filter(item => item.value > 0);        return { data, total };    }, [assets]);        
  // MÃ©trica 2: DistribuciÃ³n por Criticidad (A, B, C, D)    const assetCriticalitySummary = useMemo(() => {
        const summary = { 'A': 0, 'B': 0, 'C': 0, 'D': 0 };        assets.forEach(asset => {            summary[asset.criticality] = (summary[asset.criticality] || 0) + 1;        });
const total = assets.length;        const data = [            { name: 'A (Alta)', value: summary['A'], color: '#DC2626' }, 
  // Red-600            { name: 'B (M-Alta)', value: summary['B'], color: '#F97316' }, 
  // Orange-600            { name: 'C (M-Baja)', value: summary['C'], color: '#FCD34D' }, 
  // Amber-300            { name: 'D (Baja)', value: summary['D'], color: '#4ADE80' }, 
  // Green-400        ].filter(item => item.value > 0);        return { data, total };    }, [assets]);        
  // MÃ©trica 3: EvoluciÃ³n mensual (Ãºltimos 12 meses) basada en inspecciones    const monthlyEvolutionData = useMemo(() => {
        const monthNames = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];
  const now = new Date();
const twelveMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 11, 1);
const monthsData = [];        for (let i = 0; i < 12; i++) {            const d = new Date(twelveMonthsAgo.getFullYear(), twelveMonthsAgo.getMonth() + i, 1);            monthsData.push({ month: monthNames[d.getMonth()], valueOK: 0, valueALERT: 0 });        }        if (Array.isArray(allInspections)) {            allInspections.forEach((insp) => {
                const inspDate = insp?.date?.toDate ? insp.date.toDate() : (insp?.date instanceof Date ? insp.date : null);                if (!inspDate) return;                if (inspDate >= twelveMonthsAgo) {                    const monthIndex = (inspDate.getFullYear() - twelveMonthsAgo.getFullYear()) * 12 + (inspDate.getMonth() - twelveMonthsAgo.getMonth());                    if (monthIndex >= 0 && monthIndex < 12) {                        if (insp.overallStatus === 'OK') {                            monthsData[monthIndex].valueOK += 1;                        } else if (insp.overallStatus === 'ALERT') {                            monthsData[monthIndex].valueALERT += 1;                        }                    }                }            });        }        return monthsData;    }, [allInspections]);    return (        <div className="space-y-8">            {/* Row 1: Totales, Estado de Activos y Criticidad */}            <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">                                {/* Card: Total de Activos */}                <div className="bg-gray-800 p-6 rounded-xl shadow-xl border-t-4 border-blue-500">                    <p className="text-sm font-medium text-gray-400">Activos Totales</p>                    <div className="flex items-center justify-between mt-1">                        <span className="text-5xl font-extrabold text-white">{assetStatusSummary.total}</span>                        <Target className="w-10 h-10 text-blue-400" />                    </div>                </div>                {/* Card: Estado de Activos (OK/ALERT/Uninspected) */}                <div className="lg:col-span-2 bg-gray-800 p-6 rounded-xl shadow-xl border-t-4 border-teal-500">                    <p className="text-xl font-semibold text-teal-300 mb-4">Estado de Activos (Actual)</p>                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 items-center">                        <div>                            <PieChart data={assetStatusSummary.data} />                        </div>                        <div className="space-y-2">                            {assetStatusSummary.data.map((item, index) => (                                <div key={index} className="flex items-center">                                    <div className="w-3 h-3 rounded-full mr-3" style={{ backgroundColor: item.color }}></div>                                    <span className="text-gray-200">{item.name}:</span>                                    <span className="ml-2 font-bold text-lg">{item.value}</span>                                    <span className="text-gray-400 ml-1">({((item.value / assetStatusSummary.total) * 100).toFixed(1)}%)</span>                                </div>                            ))}                        </div>                    </div>                </div>                                {/* Card: DistribuciÃ³n por Criticidad (A, B, C, D) */}                <div className="bg-gray-800 p-6 rounded-xl shadow-xl border-t-4 border-yellow-500">                    <p className="text-sm font-medium text-gray-400">DistribuciÃ³n por Criticidad</p>                    <div className="h-40 flex flex-col justify-center">                        <PieChart data={assetCriticalitySummary.data} />                    </div>                    <div className="mt-4 space-y-1 text-xs">                        {assetCriticalitySummary.data.map((item, index) => (                            <div key={index} className="flex justify-between items-center">                                <div className="flex items-center">                                    <div className="w-2 h-2 rounded-full mr-2" style={{ backgroundColor: item.color }}></div>                                    <span className="text-gray-300 font-semibold">{item.name}</span>                                </div>                                <span className="font-bold text-white">{item.value}</span>                            </div>                        ))}                    </div>                </div>            </div>            {/* Row 2: EvoluciÃ³n y Historial */}            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">                                {/* Card: EvoluciÃ³n del Estado (Barras) */}                <div className="lg:col-span-2 bg-gray-800 p-6 rounded-xl shadow-xl border-t-4 border-indigo-500">                    <h2 className="text-2xl font-semibold mb-4 flex items-center text-indigo-300">                        <BarChart className="w-5 h-5 mr-2" /> EvoluciÃ³n del Estado (Ãšltimos 12 meses)                    </h2>                    <div className="h-64 flex items-center justify-center">                        <AssetEvolutionChart data={monthlyEvolutionData} />                    </div>                    <div className="flex justify-center mt-4 space-x-6 text-sm">                        <div className="flex items-center"><div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div><span className='text-gray-300'>OK</span></div>                        <div className="flex items-center"><div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div><span className='text-gray-300'>ALERTA</span></div>                    </div>                </div>                                {/* Card: Historial de Inspecciones Recientes */}                <div className="bg-gray-800 p-6 rounded-xl shadow-xl border-t-4 border-purple-500">                    <h2 className="text-2xl font-semibold mb-4 flex items-center text-purple-300">                        <Clock className="w-5 h-5 mr-2" /> Ãšltimas 10 Inspecciones                    </h2>                                        {latestInspections.length === 0 ? (                        <p className="text-gray-400 italic">No hay registros de inspecciÃ³n recientes.</p>                    ) : (                        <div className="space-y-3">                            {latestInspections.map((insp) => (                                <div                                     key={insp.id}                                     className={`flex items-center p-3 rounded-lg shadow-md border-l-4 ${insp.overallStatus === 'ALERT' ? 'border-red-500 bg-gray-700/50' : 'border-green-500 bg-gray-700'}`}                                >                                    <div className="flex-grow">                                        <p className="text-lg font-bold text-white">{insp.assetName}</p>                                        <p className="text-sm text-gray-300">                                            Insp: {insp.date.toLocaleDateString()}                                        </p>                                    </div>                                    <span className={`flex-shrink-0 px-3 py-1 text-xs font-semibold rounded-full ${insp.overallStatus === 'ALERT' ? 'bg-red-600' : 'bg-green-600'} text-white`}>                                        {insp.overallStatus}                                    </span>                                    <button                                         className="ml-4 p-2 bg-blue-600 rounded-lg hover:bg-blue-700 text-white text-sm font-medium"                                        onClick={() => {
                                            const asset = assets.find(a => a.id === insp.assetId);                                            if (asset) onInspectAssetHistory(asset);                                        }}                                    >                                        Detalle                                    </button>                                </div>                            ))}                        </div>                    )}                </div>            </div>        </div>    );};
  // --- END: DASHBOARD COMPONENT ---
  // Componente para el Formulario de InspecciÃ³nconst InspectionForm = ({ asset, onBack, onSave, loading }) => {
  const [results, setResults] = useState([]);
const [notes, setNotes] = useState('');  
  // Inicializa los resultados del checklist cuando el activo cambia  useEffect(() => {
    if (asset?.checklist) {      const initialResults = asset.checklist.map((item, index) => ({        questionIndex: index,        text: item.text,        type: item.type,        answer: item.type === 'boolean' ? 'No' : '', 
  // 'No' por defecto (OK)        status: 'OK',         notes: '',      }));      setResults(initialResults);    }  }, [asset]);  
  // Maneja el cambio de respuesta en un punto del checklist  const handleInputChange = (index, value) => {
    setResults((prev) => {
      const newResults = [...prev];      newResults[index] = {        ...newResults[index],        answer: value,        status: newResults[index].type === 'boolean' && value === 'Si' ? 'ALERT' : 'OK',      };      return newResults;    });  };  
  // Maneja cambios en las notas de un punto del checklist  const handleNotesChange = (index, value) => {
    setResults((prev) => {
      const newResults = [...prev];      newResults[index] = {        ...newResults[index],        notes: value,      };      return newResults;    });  };  
  // Calcula el estado general de la inspecciÃ³n: ALERT si cualquier punto estÃ¡ en ALERT  const overallStatus = results.some(r => r.status === 'ALERT') ? 'ALERT' : 'OK';    
  // Llama a la funciÃ³n de guardar en el componente padre  const handleSave = () => {
    onSave(results, notes, overallStatus);  };    
  // Asegura que todas las preguntas booleanas tienen una respuesta y los textos no estÃ¡n vacÃ­os  const isFormComplete = results.every(r => r.type === 'boolean' ? ['Si', 'No'].includes(r.answer) : r.answer.trim() !== '');  return (    <div className="bg-gray-800 p-6 rounded-xl shadow-2xl">      <div className="flex justify-between items-center mb-6 border-b border-gray-700 pb-4">  
  // Calcula el estado general de la inspecciÃ³n: ALERT si cualquier punto estÃ¡ en ALERT  const overallStatus = results.some(r => r.status === 'ALERT') ? 'ALERT' : 'OK';    
  // Llama a la funciÃ³n de guardar en el componente padre  const handleSave = () => {
    onSave(results, notes, overallStatus);  };    
  // Asegura que todas las preguntas booleanas tienen una respuesta y los textos no estÃ¡n vacÃ­os  const isFormComplete = results.every(r => r.type === 'boolean' ? ['Si', 'No'].includes(r.answer) : r.answer.trim() !== '');  return (    <div className="bg-gray-800 p-6 rounded-xl shadow-2xl">      <div className="flex justify-between items-center mb-6 border-b border-gray-700 pb-4">        <h2 className="text-3xl font-bold text-blue-400">          InspecciÃ³n de: {asset.name}         </h2>        <button           onClick={onBack}          className="px-4 py-2 bg-gray-600 hover:bg-gray-500 rounded-lg text-white transition duration-150 flex items-center"        >          <ArrowLeft className="w-4 h-4 mr-2" /> Volver a Activos        </button>      </div>      <p className="text-lg mb-4 text-gray-300">        UbicaciÃ³n: {asset.location} | Criticidad: <span className={`font-bold p-1 rounded ${asset.criticality === 'A' ? 'bg-red-500' : asset.criticality === 'D' ? 'bg-green-500' : 'bg-orange-500'}`}>{asset.criticality}</span>      </p>            {/* Lista de Puntos de InspecciÃ³n */}      <div className="space-y-6">        <p className="text-sm italic text-gray-400 mb-4 border-b border-gray-700 pb-2">            Marque los resultados. Un resultado 'Si' (para booleanos) o cualquier alerta en notas, marcarÃ¡ el punto como ALERTA.        </p>        {results.map((item, index) => (          <div             key={index}             className={`p-4 rounded-lg shadow-md transition duration-150 ${item.status === 'ALERT' ? 'bg-red-900 border-l-4 border-red-500' : 'bg-gray-700 border-l-4 border-teal-500'}`}          >            <label className="block text-lg font-medium mb-2 text-gray-50">              {index + 1}. {item.text}            </label>                        {/* Controles de Respuesta */}            {item.type === 'boolean' ? (              <div className="flex space-x-4 mt-2">                {['No', 'Si'].map((option, i) => (                  <button                    key={i}                    type="button"                    onClick={() => handleInputChange(index, option)}                    className={`px-4 py-2 rounded-lg font-semibold transition duration-150 ${                      item.answer === option                        ? option === 'Si' ? 'bg-red-500 text-white' : 'bg-green-500 text-white'                        : 'bg-gray-500 hover:bg-gray-600 text-gray-100'                    }`}                  >                    {option} ({option === 'Si' ? 'ALERTA' : 'OK'})                  </button>                ))}              </div>            ) : (              <input                type="text"                value={item.answer}                onChange={(e) => handleInputChange(index, e.target.value)}                placeholder="Introduzca lectura o valor..."                className="w-full p-2 bg-gray-600 border border-gray-500 rounded-lg focus:ring-teal-500 focus:border-teal-500"                required              />            )}                        {/* Notas del Punto de InspecciÃ³n */}            <textarea              value={item.notes}              onChange={(e) => handleNotesChange(index, e.target.value)}              placeholder="Notas detalladas de la inspecciÃ³n o hallazgos (opcional)..."              rows="2"              className="w-full mt-3 p-2 bg-gray-600 border border-gray-500 rounded-lg focus:ring-teal-500 focus:border-teal-500 resize-none text-sm"            />          </div>        ))}      </div>            {/* Notas Generales y BotÃ³n de Guardado */}      <div className="mt-8 p-4 bg-gray-700 rounded-lg shadow-inner">        <label htmlFor="generalNotes" className="block text-lg font-medium text-gray-200 mb-2">          Notas Generales de la InspecciÃ³n        </label>        <textarea          id="generalNotes"          value={notes}          onChange={(e) => setNotes(e.target.value)}          placeholder="Comentarios adicionales sobre el estado general del activo o el entorno..."          rows="3"          className="w-full p-3 bg-gray-600 border border-gray-500 rounded-lg focus:ring-blue-500 focus:border-blue-500 resize-none"        />      </div>      <div className="mt-6 flex justify-between items-center pt-4 border-t border-gray-700">        <div className="text-xl font-bold">            Estado Final:             <span className={`ml-2 px-3 py-1 rounded-full ${overallStatus === 'ALERT' ? 'bg-red-500' : 'bg-green-500'} text-white`}>                {overallStatus === 'ALERT' ? 'ALERTA' : 'OK'}            </span>        </div>        <button          onClick={handleSave}          className={`px-6 py-3 textos puntos de inspecciÃ³n para guardar.        </p>      )}    </div>  );};
  const App = () => {
  
  // Si estÃ¡ en DEMO, renderiza la UI de muestra sin inicializar Firebase  if (DEMO_MODE) {    return <DemoApp />;  }  const [db, setDb] = useState(null);
const [auth, setAuth] = useState(null);
const [userId, (            <Loader className="w-5 h-5 inline animate-spin mr-2" />          ) : (            <CheckCircle className="w-5 h-5 inline mr-2" />          )}          Guardar Registro de InspecciÃ³n        </button>      </div>      {!isFormComplete && (        <p className="text-center mt-3 text-sm text-red-400">            * Por favor, complete todos los puntos de inspecciÃ³n para guardar.        </p>      )}    </div>  );};
  const App = () => {
  
  // Si estÃ¡ en DEMO, renderiza la UI de muestra sin inicializar Firebase  if (DEMO_MODE) {    return <DemoApp />;  }  const [db, setDb] = useState(null);
const [auth, setAuth] = useState(null);
const [userId, setUserId] = useState(null);
const [isAuthReady, setIsAuthReady] = useState(false);
const [assets, setAssets] = useState([]);
const [latestInspections, setLatestInspections] = useState([]); 
  // Nuevo estado para inspecciones recientes  const [allInspections, setAllInspections] = useState([]); 
  // Para el grÃ¡fico de evoluciÃ³n    
  // Estados para formulario de nuevo activo  const [newAssetName, setNewAssetName] = useState('');
const [newAssetLocation, setNewAssetLocation] = useState('');
const [newAssetDescription, setNewAssetDescription] = useState('');
const [newAssetCriticality, setNewAssetCriticality] = useState('D');
const [loading, setLoading] = useState(false);
const [aiLoading, setAiLoading] = useState(false);
const [error, setError] = useState(null);
const [activeView, setActiveView] = useState('list'); 
  // 'list', 'inspection', 'dashboard', 'assetHistory'  const [selectedAsset, setSelectedAsset] = useState(null);    
  // --- NUEVO ESTADO PARA BÃšSQUEDA ---  const [searchTerm, setSearchTerm] = useState('');     
  // FunciÃ³n para cambiar de vista (Ãºtil para la navegaciÃ³n del dashboard)  const navigateToView = useCallback((view, asset = null) => {
    setActiveView(view);    setSelectedAsset(asset);  }, []);  
  // 1. INITIALIZATION and AUTHENTICATION  useEffect(() => {
    setLogLevel('error');     if (Object.keys(firebaseConfig).length === 0) {      console.error("Firebase config is missing.");      setError("Error: Co {          console.error('AutenticaciÃ³n fallida (Â¿Auth anÃ³nima habilitada?):', err);          setError('No se pudo autentit firestore = getFirestore(app);
const authInstance = getAuth(app);            setDb(firestore);      setAuth(authInsta         setIsAuthReady(true);        }      });      return () => unsubscribe();    } catch (e) {      console.error("Error during Firebase initialization:", e);      setError("Error al inicializar Firebase. Ver consola.");    }  }, []);  
  // 2. FIRESTORE REAL-TIME DATA LISTENER (Assets)  useEffect(() => {
    if (db && userId) {      const assetCollectionPath = `/artifacts/${appId}/users/${userId}/assets`;      const assetsColRef = collection(db, assetCollectionPath);
const q = query(assetsColRef);
const unsubscribe = onSnapshot(q, (snapshot) => {
        const assetsData = snapshot.docs.map(doc => ({          id: doc.id,          ...doc.data()        }));        assetsData.sort((a, b) => (b.createdAt?.toMillis() || 0) - (a.createdAt?.toMillis() || 0));        setAssets(assetsData);        setError(null);       }, (e) => {
        console.error("Error fetching assets:", e);        setError("Error al cargar los activos. Ver consola.");      });      return () => unsubscribe();    }  }, [db, userId]);    
  // 3. FIRESTORE REAL-TIME DATA LISTENER (Latest Inspections)  useEffect(() => {
    if (db && userId) {        
  // Obtenemos los Ãºltimos 10 registros de inspecciÃ³n, ordenados por fecha descendente.        const inspectionCollectionPath = `/artifacts/${appId}/users/${userId}/inspections`;        const inspectionsColRef = collection(db, inspectionCollectionPath);                
  // Usamos solo limit y orderBy para obtener los datos correctos del historial.        const q = query(inspectionsColRef, orderBy('date', 'desc'), limit(10));
const unsubscribe = onSnapshot(q, (snapshot) => {
            const inspectionsData = snapshot.docs.map(doc => ({                id: doc.id,                ...doc.data(),                
  // Convertir Timestamp a objeto Date para fÃ¡cil manejo en React                date: doc.data().date?.toDate ? doc.data().date.toDate() : new Date(),             }));            setLatestInspections(inspectionsData);        }, (e) => {
            console.error("Error fetching latest inspections:", e);            
  // Manejo de error si falla el Ã­ndice (comÃºn con orderBy)            
  // setError("Advertencia: Fallo al cargar el historial de inspecciones. Si hay error de Ã­ndice en consola, se puede quitar el orderBy.");        });        return () => unsubscribe();    }  }, [db, userId]);  
  // --- LÃ“GICA DE FILTRADO DE ACTIVOS ---  const filteredAssets = useMemo(() => {
    if (!searchTerm) return assets;    const lowerCaseSearchTerm = searchTerm.toLowerCase();    return assets.filter(asset => {        
  // Buscar por nombre del activo        const nameMatch = asset.name.toLowerCase().includes(lowerCaseSearchTerm);        
  // Buscar por ubicaciÃ³n del activo        const locationMatch = (asset.location || '').toLowerCase().includes(lowerCaseSearchTerm);                return nameMatch || locationMatch;    });  }, [assets, searchTerm]);  
  // ------------------------------------  
  // Function to determine criticality color  const getCriticalityColor = (crit) => {
    switch (crit) {      case 'A': return 'bg-red-500 text-white';      case 'B': return 'bg-orange-500 text-white';      case 'C': return 'bg-yellow-500 text-gray-800';      case 'D': return 'bg-green-500 text-white';      default: return 'bg-gray-400 text-white';    }  };  
  // LLM FEATURE: Generate Suggested Checklist  const handleGenerateChecklist = async () => {
    if (!newAssetName || !newAssetCriticality) {        setError("Necesitas al menos el Nombre y la Criticidad para generar una lista.");        return;    }    setAiLoading(true);    setError(null);
const systemPrompt = `Eres un ingeniero de confiabilidad experto. Tu tarea es generar un JSON de 4 a 6 puntos de inspecciÃ³n visual y auditiva de rutina (diaria) para el activo proporcionado. CÃ©ntrate en fallos comunes detectables sin instrumentaciÃ³n avanzada. La respuesta DEBE ser Ãºnicamente un arreglo JSON vÃ¡lido de objetos (sin texto adicional ni bloques markdown). Cada objeto debe tener: {"text": string, "type": "boolean" | "text"}.`;        const userQuery = `Activo: "${newAssetName}". Criticidad: ${newAssetCriticality}.`;    const payload = {        contents: [          {            role: 'user',            parts: [              { text: `${systemPrompt}\n\nActivo: "${newAssetName}". Criticidad: ${newAssetCriticality}. Responde SOLO con erar un JSON de 4 a 6 puntos de inspecciÃ³n visual y auditiva de rutina (diaria) para el activo proporcionado. CÃ©ntrate en fallos comunes detectables sin instrumentaciÃ³n avanzada. La respuesta DEBE ser Ãºnicamente un arreglo JSON vÃ¡lido de objetos (sin texto adicional ni bloques markdown). Cada objeto debe tener: {"text": string, "type": "boolean" | "text"}.`;        const userQuery = `Activo: "${newAssetName}". Criticidad: ${newAssetCriticality}.`;    const payload = {        contents: [          {            role: 'user',            parts: [              { text: `${systemPrompt}\n\nActivo: "${newAssetName}". Criticidad: ${newAssetCriticality}. Responde SOLO con el arreglo JSON solicitado.` }            ]          }        ]    };    try {        const jsonText = await fetchGemini(payload);
const suggestedChecklist = JSON.parse(jsonText);                sessionStorage.setItem('suggestedChecklist', JSON.stringify(suggestedChecklist));        setError("âœ¨ Checklist sugerido por IA listo. Â¡Presiona 'Guardar Activo' para almacenarlo!");    } catch (e) {        console.error("Error generating checklist:", e);        setError(`Error del Generador IA: ${e.message}. Usando plantilla por defecto.`);        sessionStorage.removeItem('suggestedChecklist');    } finally {        setAiLoading(false);    }  };  
  // LLM FEATURE: Analyze Criticality  const handleAnalyzeCriticality = async () => {
    if (!newAssetDescription) {        setError("Por favor, introduce una DescripciÃ³n del activo para el anÃ¡lisis de criticidad.");        return;    }    setAiLoading(true);    setError(null);
const systemPrompt = `Eres un Ingeniero de Confiabilidad. Analiza la siguiente descripciÃ³n de activo. Tu tarea es asignar la criticidad mÃ¡s adecuada (A, B, C o D) y justificar brevemente por quÃ©. La respuesta DEBE ser Ãºnicamente un objeto JSON vÃ¡lido con dos campos: {"criticality": "A"|"B"|"C"|"D", "justification": string}. No incluyas texto adicional ni bloques markdown.`;        const userQuery = `DescripciÃ³n del Activo: "${newAssetDescription}". Basado en esta descripciÃ³n, asigna una criticidad entre A (Muy Alta) y D (Baja).`;    const payload = {        contents: [          {            role: 'user',            parts: [              { text: `${systemPrompt}\n\nDescripciÃ³n del Activo: "${newAssetDescription}". Devuelve SOLO el objeto JSON solicitado.` }            ]          }        ]    };    try {        const jsonText = await fetchGemini(payload);
const analysis = JSON.parse(jsonText);                setNewAssetCriticality(analysis.criticality);        setError(`âœ¨ Criticidad sugerida por IA: ${analysis.criticality}. JustificaciÃ³n: ${analysis.justification}`);    } catch (e) {        console.error("Error analyzing criticality:", e);        setError(`Error del Analizador IA: ${e.message}. No se pudo sugerir la criticidad.`);    } finally {        setAiLoading(false);    }  };  
  // Function to add a new Asset  const handleAddAsset = useCallback(async (e) => {
    e.preventDefault();    if (!newAssetName || !db || !userId) {      setError("El nombre del activo es obligatorio.");      return;    }    setLoading(true);    setError(null);    try {      const assetCollectionPath = `/artifacts/${appId}/users/${userId}/assets`;            const storedChecklist = sessionStorage.getItem('suggestedChecklist');
const finalChecklist = storedChecklist ? JSON.parse(storedChecklist) : defaultChecklist;      sessionStorage.removeItem('suggestedChecklist');       await addDoc(collection(db, assetCollectionPath), {        name: newAssetName,        location: newAssetLocation,        description: newAssetDescription,        criticality: newAssetCriticality,        status: 'Uninspected', 
  // Estado inicial        createdAt: serverTimestamp(),        checklist: finalChecklist, 
  // Checklist guardado      });            setNewAssetName('');      setNewAssetLocation('');      setNewAssetDescription('');      setNewAssetCriticality('D');          } catch (e) {      console.error("Error adding document: ", e);      setError("Error al guardar el activo: " + e.message);    } finally {      setLoading(false);    }  }, [db, userId, newAssetName, newAssetLocation, newAssetDescription, newAssetCriticality]);    
  // Function to save a new Inspection record  const handleSaveInspection = useCallback(async (results, notes, overallStatus) => {
    if (!db || !userId || !selectedAsset) return;    setLoading(true);    setError(null);    try {      
  // 1. Guardar el nuevo registro de InspecciÃ³n      const inspectionCollectionPath = `/artifacts/${appId}/users/${userId}/inspections`;      await addDoc(collection(db, inspectionCollectionPath), {        assetId: selectedAsset.id,        assetName: selectedAsset.name,        inspectorUserId: userId,        date: serverTimestamp(),        results: results,         notes: notes,        overallStatus: overallStatus,      });      
  // 2. Actualizar el estado del Activo      const assetDocRef = doc(db, `/artifacts/${appId}/users/${userId}/assets`, selectedAsset.id);      await updateDoc(assetDocRef, {        status: overallStatus,        lastInspectionDate: serverTimestamp(),      });            
  // 3. Resetear el estado de la vista      setLoading(false);      setSelectedAsset(null);      setActiveView('list');      setError("âœ… InspecciÃ³n guardada y estado del activo actualizado.");    } catch (e) {      console.error("Error saving inspection:", e);      setError("Error al guardar la inspecciÃ³n: " + e.message);      setLoading(false);    }  }, [db, userId, selectedAsset]);  if (!isAuthReady) {    return (      <div className="flex items-center justify-center min-h-screen bg-gray-900 text-white">        <Loader className="w-8 h-8 animate-spin mr-2" /> Cargando aplicaciÃ³n...      </div>    );  }  
  // Main UI  return (    <div className="min-h-screen bg-gray-900 text-gray-100 p-4 sm:p-8 font-sans">      <header className="mb-8 pb-4 border-b border-gray-700">        <div className="flex justify-between items-center">            <h1 className="text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-teal-400">                PIA (Predictive Inspection App)            </h1>            <nav className="flex space-x-3">                <button                    onClick={() => navigateToView('list')}                    className={`px-3 py-2 rounded-lg font-semibold transition duration-150 flex items-center ${activeView === 'list' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}                >                    <List className="w-5 h-5 mr-2" /> Activos                </button>                <button                    onClick={() => navigateToView('dashboard')}                    className={`px-3 py-2 rounded-lg font-semibold transition duration-150 flex items-center ${activeView === 'dashboard' ? 'bg-teal-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}                >                    <BarChart2 className="w-5 h-5 mr-2" /> Dashboard                </button>            </nav>        </div>        <p className="text-sm text-gray-400 mt-1">          {userId && `Usuario: ${userId}`} | Entorno: {appId}        </p>      </header>            {error && (        <div className="p-3 mb-4 bg-red-800 rounded-lg flex items-center shadow-lg">          <AlertTriangle className="w-5 h-5 mr-2" />          <span className="text-sm">{error}</span>        </div>      )}      {/* RENDERIZADO CONDICIONAL DE VISTAS */}            {/* VISTA: LISTA DE ACTIVOS Y CREACIÃ“N */}      {activeView === 'list' && (        <>          {/* ACTIVO CREATION FORM */}          <div className="bg-gray-800 p-6 rounded-xl shadow-2xl mb-8">            <h2 className="text-2xl font-semibold mb-4 flex items-center text-teal-300">              <Plus className="w-5 h-5 mr-2" /> Nuevo Activo y GeneraciÃ³n Inteligente            </h2>            <form onSubmit={handleAddAsset} className="grid grid-cols-1 md:grid-cols-4 gap-4">                            <div className="md:col-span-2">                <label htmlFor="assetName" className="block text-sm font-medium text-gray-400 mb-1">                  1. Nombre del Activo (Ej: Bomba Principal M-1)                </label>                <input                  id="assetName"                  type="text"                  value={newAssetName}                  onChange={(e) => setNewAssetName(e.target.value)}                  placeholder="Escribe el nombre del activo"                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-150"                  required                  disabled={loading || aiLoading}                />              </div>              <div className="md:col-span-2">                <label htmlFor="assetLocation" className="block text-sm font-medium text-gray-400 mb-1">                  UbicaciÃ³n                </label>                <input                  id="assetLocation"                  type="text"                  value={newAssetLocation}                  onChange={(e) => setNewAssetLocation(e.target.value)}                  placeholder="Ej: Planta Baja, Ãrea 3"                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-150"                  disabled={loading || aiLoading}                />              </div>                            <div className="md:col-span-2">                <label htmlFor="assetDescription" className="block text-sm font-medium text-gray-400 mb-1">                  2. DescripciÃ³n y Contexto (Para AnÃ¡lisis IA)                </label>                <textarea                  id="assetDescription"                  value={newAssetDescription}                  onChange={(e) => setNewAssetDescription(e.target.value)}                  placeholder="Ej: Motor elÃ©ctrico de 500HP. Componente crÃ­tico en la lÃ­nea de producciÃ³n, si falla se detiene toda la planta."                  rows="3"                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-150 resize-none"                  disabled={loading || aiLoading}                />              </div>              <div className="grid grid-cols-1 gap-4 md:col-span-2">                <div>                    <label htmlFor="assetCriticality" className="block text-sm font-medium text-gray-400 mb-1">                    3. Criticidad Actual                    </label>                    <select                    id="assetCriticality"                    value={newAssetCriticality}                    onChange={(e) dleAnalyzeCriticality}                    className={`p-3 text-white font-bold rounded-lg transition duration-300 transform flex items-center justify-center ${                      aiLoading ? 'bg-indigo-600/70 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700 hover:shadow-lg'                    }`}                    disabled={aiLoading}                  >                    {aiLoading ? (                      <Loader className="w-5 h-5 inline animate-spin mr-2" />                    ) : (                      <Sparkles className="w-5 h-5 inline mr-2" />                    )}                    Analizar Criticidad (IA)                  </button>              </div>        y}                    className={`p-3 text-white font-bold rounded-lg transition duration-300 transform flex items-center justify-center ${                      aiLoading ? 'bg-indigo-600/70 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700 hover:shadow-lg'                    }`}                    disabled={aiLoading}                  >                    {aiLoading ? (                      <Loader className="w-5 h-5 inline animate-spin mr-2" />                    ) : (                     tName || !newAssetCriticality}                  >                    {aiLoading ? (                      <Loader className="w-5 h-5 inline animate-spin mr-2" />                    ) : (                      <Sparkles className="w-5 h-5 inline mr-2" />                    )}                    Generar Checklist (IA)                  </button>                  <button                    type="submit"                    className={`p-3 text-white font-bold rounded-lg transition duration-300 transform flex items-center justify-center ${                      loading ? 'bg-blue-600/70 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700 hover:shadow-lg'                    }`}                    disabled={loading}                  >                    {loading ? (                      <Loader className="w-5 h-5 inline animate-spin mr-2" />                    ) : (                      <CheckCircle className="w-5 h-5 inline mr-2" />                    )}                    Guardar Activo y Checklist                  </button>              </div>            </form>          </div>                    {/* ASSET LIST */}          <div className="bg-gray-800 p-6 rounded-xl shadow-2xl">            <h2 className="text-2xl font-semibold mb-4 flex items-center text-blue-300">              <List className="w-5 h-5 mr-2" /> Mis Activos ({filteredAssets.length} de {assets.length} mostrados)            </h2>                        {/* INPUT DE BÃšSQUEDA --- NUEVO --- */}            <div className="relative mb-6">                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />                <input                    type="text"                    placeholder="Buscar por Nombre o UbicaciÃ³n del Activo..."                    value={searchTerm}                    onChange={(e) => setSearchTerm(e.target.value)}                    className="w-full p-3 pl-10 bg-gray-700 border border-gray-600 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-150"                />            </div>            {/* FIN INPUT DE BÃšSQUEDA */}                        {filteredAssets.length === 0 ? (              <p className="text-gray-400 italic">No se encontraron activos que coincidan con la bÃºsqueda.</p>            ) : (              <div className="space-y-4">                {filteredAssets.map((asset) => (                  <div                     key={asset.id}                     className="flex items-center p-4 bg-gray-700/50 rounded-lg shadow-md hover:bg-gray-700 transition duration-150 border-l-4 border-teal-400"                  >                    <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center mr-4 font-bold ${getCriticalityColor(asset.criticality)}`}>                      {asset.criticality}                    </div>                    <div className="flex-grow">                      <h3 className="text-lg font-bold text-gray-50">{asset.name}</h3>                      <p className="text-sm text-gray-300">{asset.location || 'Sin ubicaciÃ³n'}</p>                    </div>                                          <div className="flex-shrink-0 text-right flex items-center">                                            <span className={`inline-block px-3 py-1 text-xs font-semibold rounded-full ${asset.status === 'ALERT' ? 'bg-red-600' : 'bg-green-600'} text-white mr-4`}>                                              {asset.status}                                            </span>                                            <button                                               className="p-2 bg-gray-600 rounded-lg hover:bg-gray-500 text-white text-sm font-medium"                                              onClick={() => navigateToView('assetHistory', asset)}                                            >                                              Historial                                            </button>                                            <button                                               className="ml-2 p-2 bg-blue-600 rounded-lg hover:bg-blue-700 text-white text-sm font-medium"                                              onClick={() => {
                                                  setSelectedAsset(asset);                                                  navigateToView('inspection', asset);                                              }}                                            >                                              Inspeccionar                                            </button>                                          </div>                  </div>                ))}              </div>            )}          </div>        </>      )}      {/* VISTA: FORMULARIO DE INSPECCIÃ“N */}      {activeView === 'inspection' && selectedAsset && (        <InspectionForm          asset={selectedAsset}          onBack={() => navigateToView('list')}          onSave={handleSaveInspection}          loading={loading}        />      )}            {/* VISTA: DASHBOARD */}      {activeView === 'dashboard' && (        <Dashboard             assets={assets}             latestInspections={latestInspections}            allInspections={allInspections} 
  // Pasar todas las inspecciones            onInspectAssetHistory={(asset) => navigateToView('assetHistory', asset)} 
  // Modificado        />      )}            {/* VISTA: HISTORIAL DE ACTIVO INDIVIDUAL */}      {activeView === 'assetHistory' && selectedAsset && db && userId && appId && (        <AssetHistory          db={db}          userId={userId}          appId={appId}          asset={selectedAsset}          onBack={() => navigateToView('dashboard')} 
  // Volver al dashboard        />      )}      <footer className="mt-8 pt-4 border-t border-gray-700 text-center text-xs text-gray-500">        AplicaciÃ³n PIA (V7.0) - Impulsada por React, Firestore y Gemini      </footer>    </div>  );};
  export default App;



